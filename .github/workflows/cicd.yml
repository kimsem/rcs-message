name: RCS Application CI/CD

on:
  #push:
  #  branches: [ main ]
  #pull_request:
  #  branches: [ main ]
  workflow_dispatch:
    inputs:
      USERID:
        description: 'User ID for resource naming (lowercase letters and numbers only)'
        required: true
        default: 'dg4us'
        type: string

env:
  PIPELINE_ID: rcs-${{ github.run_number }}
  RESOURCE_GROUP: ${{ vars.RESOURCE_GROUP }}
  LOCATION: ${{ vars.LOCATION }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    services:
      gradle:
        image: gradle:jdk17
        options: --user root
      azure-cli:
        image: mcr.microsoft.com/azure-cli
        options: --user root

    steps:
      - uses: actions/checkout@v4

      - name: Set up Environment Variables
        run: |
          echo "DB_NAMESPACE=rcs-mvp" >> $GITHUB_ENV
          echo "APP_NAMESPACE=rcs-mvp" >> $GITHUB_ENV
          echo "IMAGE_REG=${{ github.event.inputs.USERID }}cr.azurecr.io" >> $GITHUB_ENV
          echo "IMAGE_ORG=rcs" >> $GITHUB_ENV
          echo "IMAGE_TAG=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV
          # Load deployment environment variables
          while IFS='=' read -r key value; do
            if [ ! -z "$key" ]; then
              echo "$key=$value" >> $GITHUB_ENV
            fi
          done < deployment/deploy_env_vars

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up kubelogin for non-interactive login
        uses: azure/use-kubelogin@v1
        with:
          kubelogin-version: 'v0.0.25'

      - name: Get AKS Credentials
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.RESOURCE_GROUP }}
          cluster-name: ${{ github.event.inputs.USERID }}-aks

      - name: Create Kubernetes Namespaces
        run: |
          kubectl create namespace ${{ env.DB_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
          kubectl create namespace ${{ env.APP_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

      - name: Create Kubernetes Secrets
        run: |
          kubectl create secret generic eventhub-secret \
            --namespace ${{ env.APP_NAMESPACE }} \
            --from-literal=ehub-connection-string='${{ env.PLAN_CONNECTION_STRING }}' \
            --from-literal=encrypt-hub-name='number-encrypt-requests' \
            --from-literal=send-hub-name='rcs-message-send' \
            --from-literal=result-hub-name='rcs-message-result' \
            --from-literal=consumer-group='$Default' \
            --dry-run=client -o yaml | kubectl apply -f -

          kubectl create secret generic storage-secret \
            --namespace ${{ env.APP_NAMESPACE }} \
            --from-literal=connection-string='${{ env.STORAGE_CONNECTION_STRING }}' \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build Applications
        run: |
          chmod +x gradlew
          ./gradlew common:clean common:build -x test
          ./gradlew auth-service:clean auth:build -x test
          ./gradlew message-service:clean message:build -x test
          ./gradlew history-service:clean history:build -x test
          ./gradlew basedata-service:clean basedata:build -x test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.IMAGE_REG }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and Push Container Images
        run: |
          # Auth Service
          docker build -f deployment/Dockerfile-auth \
            -t ${{ env.IMAGE_REG }}/${{ env.IMAGE_ORG }}/rcs-auth:${{ env.IMAGE_TAG }} \
            -t ${{ env.IMAGE_REG }}/${{ env.IMAGE_ORG }}/rcs-auth:latest .
          
          docker push ${{ env.IMAGE_REG }}/${{ env.IMAGE_ORG }}/rcs-auth:${{ env.IMAGE_TAG }}
          docker push ${{ env.IMAGE_REG }}/${{ env.IMAGE_ORG }}/rcs-auth:latest
          
          # Message Service
          docker build -f deployment/Dockerfile-message \
            -t ${{ env.IMAGE_REG }}/${{ env.IMAGE_ORG }}/rcs-message:${{ env.IMAGE_TAG }} \
            -t ${{ env.IMAGE_REG }}/${{ env.IMAGE_ORG }}/rcs-message:latest .
          
          docker push ${{ env.IMAGE_REG }}/${{ env.IMAGE_ORG }}/rcs-message:${{ env.IMAGE_TAG }}
          docker push ${{ env.IMAGE_REG }}/${{ env.IMAGE_ORG }}/rcs-message:latest
          
          # History Service
          docker build -f deployment/Dockerfile-history \
            -t ${{ env.IMAGE_REG }}/${{ env.IMAGE_ORG }}/rcs-history:${{ env.IMAGE_TAG }} \
            -t ${{ env.IMAGE_REG }}/${{ env.IMAGE_ORG }}/rcs-history:latest .
          
          docker push ${{ env.IMAGE_REG }}/${{ env.IMAGE_ORG }}/rcs-history:${{ env.IMAGE_TAG }}
          docker push ${{ env.IMAGE_REG }}/${{ env.IMAGE_ORG }}/rcs-history:latest
          
          # Basedata Service
          docker build -f deployment/Dockerfile-basedata \
            -t ${{ env.IMAGE_REG }}/${{ env.IMAGE_ORG }}/rcs-basedata:${{ env.IMAGE_TAG }} \
            -t ${{ env.IMAGE_REG }}/${{ env.IMAGE_ORG }}/rcs-basedata:latest .
          
          docker push ${{ env.IMAGE_REG }}/${{ env.IMAGE_ORG }}/rcs-basedata:${{ env.IMAGE_TAG }}
          docker push ${{ env.IMAGE_REG }}/${{ env.IMAGE_ORG }}/rcs-basedata:latest

      - name: Generate Deployment YAML
        run: |
          # Set additional environment variables for templates
          export userid=${{ github.event.inputs.USERID }}
          export db_namespace=${{ env.DB_NAMESPACE }}
          export app_namespace=${{ env.APP_NAMESPACE }}
          export image_tag=${{ env.IMAGE_TAG }}
          export auth_image_path=${{ env.IMAGE_REG }}/${{ env.IMAGE_ORG }}/rcs-auth:${{ env.IMAGE_TAG }}
          export message_image_path=${{ env.IMAGE_REG }}/${{ env.IMAGE_ORG }}/rcs-message:${{ env.IMAGE_TAG }}
          export history_image_path=${{ env.IMAGE_REG }}/${{ env.IMAGE_ORG }}/rcs-history:${{ env.IMAGE_TAG }}
          export basedata_image_path=${{ env.IMAGE_REG }}/${{ env.IMAGE_ORG }}/rcs-basedata:${{ env.IMAGE_TAG }}
          
          # Generate deployment files using envsubst
          envsubst < deployment/deploy.yaml.template > deployment/deploy.yaml

      - name: Deploy to AKS
        run: |
          # Deploy application
          kubectl apply -f deployment/deploy.yaml

          # Wait for application pods
          kubectl wait --for=condition=ready pod -l "app=auth-service,userid=${{ github.event.inputs.USERID }}" -n ${{ env.APP_NAMESPACE }} --timeout=600s || true
          kubectl wait --for=condition=ready pod -l "app=message-service,userid=${{ github.event.inputs.USERID }}" -n ${{ env.APP_NAMESPACE }} --timeout=600s || true
          kubectl wait --for=condition=ready pod -l "app=history-service,userid=${{ github.event.inputs.USERID }}" -n ${{ env.APP_NAMESPACE }} --timeout=600s || true
          kubectl wait --for=condition=ready pod -l "app=basedata-service,userid=${{ github.event.inputs.USERID }}" -n ${{ env.APP_NAMESPACE }} --timeout=600s || true

      - name: Verify Deployment
        run: |
          echo "Verifying service endpoints..."
          
          AUTH_IP=$(kubectl get svc ${{ github.event.inputs.USERID }}-rcs-auth -n ${{ env.APP_NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          MESSAGE_IP=$(kubectl get svc ${{ github.event.inputs.USERID }}-rcs-message -n ${{ env.APP_NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          HISTORY_IP=$(kubectl get svc ${{ github.event.inputs.USERID }}-rcs-history -n ${{ env.APP_NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          BASEDATA_IP=$(kubectl get svc ${{ github.event.inputs.USERID }}-rcs-basedata -n ${{ env.APP_NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          
          echo "Auth Service IP: $AUTH_IP"
          echo "Message Service IP: $MESSAGE_IP"
          echo "History Service IP: $HISTORY_IP"
          echo "Basedata Service IP: $BASEDATA_IP"
          
          if [ -z "$AUTH_IP" ] || [ -z "$MESSAGE_IP" ] || [ -z "$HISTORY_IP" ] || [ -z "$BASEDATA_IP" ]; then
            echo "Error: Service IPs not available"
            exit 1
          fi
