name: RCS Application CI/CD II

on:
  push:
    branches: [ main ]
  #pull_request:
  #  branches: [ main ]
  workflow_dispatch:
    inputs:
      USERID:
        description: 'User ID for resource naming (lowercase letters and numbers only)'
        required: true
        default: 'dg4us'
        type: string

env:
  RESOURCE_GROUP: ${{ vars.RESOURCE_GROUP }}
  LOCATION: ${{ vars.LOCATION }}
  USERID: ${{ github.event.inputs.USERID || 'dg4us' }}


jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set_tag.outputs.image_tag }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set image tag
        id: set_tag
        run: |
          echo "image_tag=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Build Applications
        run: |
          chmod +x gradlew
          ./gradlew auth-service:clean auth:build -x test
          ./gradlew message-service:clean message:build -x test
          ./gradlew history-service:clean history:build -x test
          ./gradlew basedata-service:clean basedata:build -x test
          ./gradlew gateway-service:clean gateway:build -x test

      - name: Check build outputs
        run: |
          for service in auth message history basedata gateway; do
            echo "Checking ${service}-service build output..."
            ls -la ${service}-service/build/libs/
          done

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            */build/libs/
            deployment/
            Dockerfile-*

  release:
    needs: build
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ needs.build.outputs.image_tag }}
    
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: .

      - name: Display structure of downloaded files
        run: ls -R

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.USERID }}cr.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and Push Container Images
        env:
          IMAGE_REG: ${{ env.USERID }}cr.azurecr.io
          IMAGE_ORG: rcs
          IMAGE_TAG: ${{ needs.build.outputs.image_tag }}
        run: |
          for service in auth message history basedata gateway
          do
            echo "Building ${service} service image..."
            
            # Create Dockerfile content
            echo "FROM eclipse-temurin:17-jdk-alpine" > "Dockerfile.${service}"
            echo "COPY ${service}-service/build/libs/${service}-service-*.jar app.jar" >> "Dockerfile.${service}"
            echo 'ENTRYPOINT ["java","$JAVA_OPTS -jar","/app.jar"]' >> "Dockerfile.${service}"
                        
            # Build Docker image
            docker build -f "Dockerfile.${service}" \
              -t "${IMAGE_REG}/${IMAGE_ORG}/rcs-${service}:${IMAGE_TAG}" \
              -t "${IMAGE_REG}/${IMAGE_ORG}/rcs-${service}:latest" .
            
            # Push Docker images
            docker push "${IMAGE_REG}/${IMAGE_ORG}/rcs-${service}:${IMAGE_TAG}"
            docker push "${IMAGE_REG}/${IMAGE_ORG}/rcs-${service}:latest"
          done

  deploy:
    needs: [build, release]
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: .

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up kubelogin
        uses: azure/use-kubelogin@v1
        with:
          kubelogin-version: 'v0.0.25'

      - name: Get AKS Credentials
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.RESOURCE_GROUP }}
          cluster-name: ${{ env.USERID }}-aks

      - name: Create Namespaces and Secrets
        env:
          DB_NAMESPACE: rcs-mvp
          APP_NAMESPACE: rcs-mvp
        run: |
          # Az CLI로 AKS 자격증명 갱신
          az aks get-credentials \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.USERID }}-aks \
            --overwrite-existing
            
          kubectl create namespace ${DB_NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -
          kubectl create namespace ${APP_NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -
          
          kubectl create configmap jvm-settings \
           --namespace ${APP_NAMESPACE} \
           --from-literal=AUTH_JAVA_OPTS="-Xms512m -Xmx1024m" \
           --from-literal=MESSAGE_JAVA_OPTS="-Xms1024m -Xmx2048m" \
           --from-literal=HISTORY_JAVA_OPTS="-Xms512m -Xmx1024m" \
           --from-literal=BASEDATA_JAVA_OPTS="-Xms256m -Xmx512m" \
           --dry-run=client -o yaml | kubectl apply -f -
          
          kubectl create secret generic 'dg4us-db-credentials' \
            --namespace ${APP_NAMESPACE} \
            --from-literal=AUTH_DB_PASSWORD='${{ secrets.RCS_DB_PASSWORD }}' \
            --from-literal=BASEDATA_DB_PASSWORD='${{ secrets.RCS_DB_PASSWORD }}' \
            --from-literal=MONGODB_DB_PASSWORD='${{ secrets.MONGODB_PASSWORD }}' \
            --from-literal=MESSAGE_DB_PASSWORD='${{ secrets.RCS_DB_PASSWORD }}' \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Generate and Apply Deployment
        env:
          IMAGE_TAG: ${{ needs.build.outputs.image_tag }}
          IMAGE_REG: ${{ env.USERID }}cr.azurecr.io
          IMAGE_ORG: rcs
          DB_NAMESPACE: rcs-mvp
          APP_NAMESPACE: rcs-mvp
          USERID: ${{ env.USERID }}
        run: |
          # Set variables for envsubst
          export auth_image_path="${IMAGE_REG}/${IMAGE_ORG}/rcs-auth:${IMAGE_TAG}"
          export message_image_path="${IMAGE_REG}/${IMAGE_ORG}/rcs-message:${IMAGE_TAG}"
          export history_image_path="${IMAGE_REG}/${IMAGE_ORG}/rcs-history:${IMAGE_TAG}"
          export basedata_image_path="${IMAGE_REG}/${IMAGE_ORG}/rcs-basedata:${IMAGE_TAG}"
          export gateway_image_path="${IMAGE_REG}/${IMAGE_ORG}/rcs-gateway:${IMAGE_TAG}"
          export userid="${USERID}"
          export app_namespace="${APP_NAMESPACE}"
          
          # Generate manifest
          envsubst < deployment/deploy.yaml.template > deployment/deploy.yaml
          
          # Display for verification
          echo "Generated deployment manifest:"
          cat deployment/deploy.yaml
          
          # Apply manifest
          kubectl apply -f deployment/deploy.yaml

      - name: Verify Deployment
        env:
          APP_NAMESPACE: rcs-mvp
        run: |
          for service in auth message history basedata gateway; do
            echo "Waiting for ${service} service..."
            kubectl wait --for=condition=ready pod \
              -l "app=${service}-service,userid=${{ env.USERID }}" \
              -n ${APP_NAMESPACE} --timeout=600s || true
              
            IP=$(kubectl get svc ${{ env.USERID }}-rcs-${service} \
              -n ${APP_NAMESPACE} \
              -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            echo "${service} Service IP: ${IP}"
            
            if [ -z "${IP}" ]; then
              echo "Error: ${service} service IP not available"
              exit 1
            fi
          done
