apiVersion: v1
kind: ConfigMap
metadata:
  name: dg4us-rcs-config
  namespace: rcs-mvp
data:
  APP_NAME: "rcs"
  SERVER_PORT: "8080"

  #Message_DB
  MESSAGE_DB_URL: "jdbc:postgresql://10.0.215.208:5432/rcs-message-db"
  MESSAGE_DB_USERNAME: "dg4s"
  MESSAGE_DB_PASSWORD: "p@ssw0rd!@"
  #BASEDATA_DB
  BASEDATA_DB_URL: "jdbc:postgresql://10.0.43.236:5432/rcs-base-db"
  BASEDATA_DB_USERNAME: "dg4s"
  BASEDATA_DB_PASSWORD: "p@ssw0rd!@"
  #AUTH_DB
  AUTH_DB_URL: "jdbc:postgresql://10.0.195.172:5432/rcs-auth-db"
  AUTH_DB_USERNAME: "dg4s"
  AUTH_DB_PASSWORD: "p@ssw0rd!@"
  #MONGO_DB
  MONGODB_URI: "mongodb+srv://dg4us-mongo.mongocluster.cosmos.azure.com/"
  MONGODB_DB_USERNAME: "dg4sadm"
  MONGODB_DB_PASSWORD: "p@ssw0rd!@"
  MONGODB_DATABASE: "rcs-history-db"
    
  # JPA 설정
  JPA_DDL_AUTO: "update"
  JPA_SHOW_SQL: "true"

  #EVENTHUB
  EVENTHUB_CONNECTION_STRING: "Endpoint=sb://dg4us-eventhub-ns.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=ABUzYkX9Ca3F3Xo4b6bi0Mf+HuqRA12qA+AEhCsri3A="
  # 수신번호 암호화 요청 큐
  EVENTHUB_ENCRYPT_NUM_REQ: "number-encrypt-requests"
  # 메시지 발송 요청 큐
  EVENTHUB_MESSAGE_SEND_REQ: "rcs-message-send"
  # 메시지 수신결과 응답 큐
  EVENTHUB_MESSAGE_RESULT_RES: "rcs-message-result"
  # 미사용 
  ENCRYPTION_KEY: "your_encryption_key" 
  
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dg4us-rcs-auth
  namespace: rcs-mvp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: auth-service
      userid: dg4us
  template:
    metadata:
      labels:
        app: auth-service
        userid: dg4us
    spec:
      containers:
      - name: auth-service
        image: ${command_image_path}
        imagePullPolicy: Always
        ports:
        - containerPort: 8080        
        resources:
          requests:
            cpu: ${resources_requests_cpu}
            memory: ${resources_requests_memory}
          limits:
            cpu: ${resources_limits_cpu}
            memory: ${resources_limits_memory}
---
apiVersion: v1
kind: Service
metadata:
  name: dg4us-rcs-auth
  namespace: rcs-mvp
spec:
  selector:
    app: auth-service
    userid: dg4us
  ports:
  - port: 8080
    targetPort: 8080
  type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dg4us-rcs-basedata
  namespace: rcs-mvp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: basedata-service
      userid: dg4us
  template:
    metadata:
      labels:
        app: basedata-service
        userid: dg4us
    spec:
      containers:
      - name: basedata-service
        image: ${query_image_path}
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
        envFrom:
        - configMapRef:
            name: dg4us-rcs-config
        env:
		- name: BASEDATA_DB_URL
            valueFrom: 
              configMapKeyRef:
                 name: dg4us-rcs-config
                 key: BASEDATA_DB_URL
		- name: BASEDATA_DB_USERNAME
            valueFrom: 
              configMapKeyRef:
                 name: dg4us-rcs-config
                 key: BASEDATA_DB_USERNAME
        - name: BASEDATA_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: dg4us-db-credentials
              key: BASEDATA_DB_PASSWORD
        resources:
          requests:
            cpu: ${resources_requests_cpu}
            memory: ${resources_requests_memory}
          limits:
            cpu: ${resources_limits_cpu}
            memory: ${resources_limits_memory}
---
apiVersion: v1
kind: Service
metadata:
  name: dg4us-rcs-basedata
  namespace: rcs-mvp
spec:
  selector:
    app: basedata-service
    userid: dg4us
  ports:
  - port: 8080
    targetPort: 8080
  type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dg4us-rcs-history
  namespace: rcs-mvp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: history-service
      userid: dg4us
  template:
    metadata:
      labels:
        app: history-service
        userid: dg4us
    spec:
      containers:
      - name: history-service
        image: ${query_image_path}
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
        envFrom:
        - configMapRef:
            name: dg4us-rcs-config
        env:
		- name: MONGODB_URI
            valueFrom: 
              configMapKeyRef:
                 name: dg4us-rcs-config
                 key: MONGODB_URI
		- name: MONGODB_DATABASE
            valueFrom: 
              configMapKeyRef:
                 name: dg4us-rcs-config
                 key: MONGODB_DATABASE
        - name: MONGODB_DB_USERNAME
            valueFrom: 
              configMapKeyRef:
                 name: dg4us-rcs-config
                 key: MONGODB_DB_USERNAME
        - name: MONGODB_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: dg4us-db-credentials
              key: MONGODB_DB_PASSWORD
        - name: STORAGE_CONNECTION_STRING
          valueFrom:
            secretKeyRef:
              name: storage-secret
              key: connection-string
        - name: EVENTHUB_CONNECTION_STRING
          valueFrom:
            secretKeyRef:
              name: eventhub-secret
              key: plan-connection-string
        - name: EVENTHUB_ENCRYPT_NUM_REQ
          value: "number-encrypt-requests"
        - name: EVENTHUB_MESSAGE_SEND_REQ
          value: "rcs-message-send"
        - name: EVENTHUB_MESSAGE_RESULT_RES
          value: "rcs-message-result" 		  
        resources:
          requests:
            cpu: ${resources_requests_cpu}
            memory: ${resources_requests_memory}
          limits:
            cpu: ${resources_limits_cpu}
            memory: ${resources_limits_memory}
---
apiVersion: v1
kind: Service
metadata:
  name: dg4us-rcs-history
  namespace: rcs-mvp
spec:
  selector:
    app: history-service
    userid: dg4us
  ports:
  - port: 8080
    targetPort: 8080
  type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dg4us-rcs-message
  namespace: rcs-mvp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: message-service
      userid: dg4us
  template:
    metadata:
      labels:
        app: message-service
        userid: dg4us
    spec:
      containers:
      - name: message-service
        image: ${query_image_path}
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
        envFrom:
        - configMapRef:
            name: dg4us-rcs-config
        env:
		- name: MESSAGE_DB_URL
            valueFrom: 
              configMapKeyRef:
                 name: dg4us-rcs-config
                 key: MESSAGE_DB_URL
		- name: MESSAGE_DB_USERNAME
            valueFrom: 
              configMapKeyRef:
                 name: dg4us-rcs-config
                 key: MESSAGE_DB_USERNAME
        - name: MESSAGE_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: dg4us-db-credentials
              key: MESSAGE_DB_PASSWORD
		- name: MONGODB_URI
            valueFrom: 
              configMapKeyRef:
                 name: dg4us-rcs-config
                 key: MONGODB_URI
		- name: MONGODB_DATABASE
            valueFrom: 
              configMapKeyRef:
                 name: dg4us-rcs-config
                 key: MONGODB_DATABASE
        - name: MONGODB_DB_USERNAME
            valueFrom: 
              configMapKeyRef:
                 name: dg4us-rcs-config
                 key: MONGODB_DB_USERNAME
        - name: MONGODB_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: dg4us-db-credentials
              key: MONGODB_DB_PASSWORD
        - name: STORAGE_CONNECTION_STRING
          valueFrom:
            secretKeyRef:
              name: storage-secret
              key: connection-string
        - name: EVENTHUB_CONNECTION_STRING
          valueFrom:
            secretKeyRef:
              name: eventhub-secret
              key: plan-connection-string
        - name: EVENTHUB_ENCRYPT_NUM_REQ
          value: "number-encrypt-requests"
        - name: EVENTHUB_MESSAGE_SEND_REQ
          value: "rcs-message-send"
        - name: EVENTHUB_MESSAGE_RESULT_RES
          value: "rcs-message-result" 		  
        resources:
          requests:
            cpu: ${resources_requests_cpu}
            memory: ${resources_requests_memory}
          limits:
            cpu: ${resources_limits_cpu}
            memory: ${resources_limits_memory}
---
apiVersion: v1
kind: Service
metadata:
  name: dg4us-rcs-message
  namespace: rcs-mvp
spec:
  selector:
    app: message-service
    userid: dg4us
  ports:
  - port: 8080
    targetPort: 8080
  type: LoadBalancer
